#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <arduinoFFT.h> 

#define LED 4
#define OLED_RESET 5
Adafruit_SSD1306 display(OLED_RESET);

// FFT configuration
#define SAMPLES 64         // Must be a power of 2
#define SAMPLING_FREQUENCY 4000 // Hz (sampling frequency)

float vReal[SAMPLES];
float vImag[SAMPLES];
ArduinoFFT<float> FFT = ArduinoFFT<float>(vReal, vImag, SAMPLES, SAMPLING_FREQUENCY);

#define TARGET_FREQUENCY 30 // Target frequency in Hz
#define FREQUENCY_THRESHOLD 50 // Acceptable deviation from the target frequency

#define FRAME_WIDTH (32)
#define FRAME_HEIGHT (32)

// 'frame_0', 32x32px
const unsigned char callum_idle_frame_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x18, 0x30, 0x00, 
	0x00, 0x20, 0x08, 0x00, 0x00, 0x40, 0x64, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x8e, 0x06, 0x00, 
	0x01, 0x19, 0x0d, 0x00, 0x01, 0x19, 0x0d, 0x00, 0x01, 0x1f, 0x0f, 0x00, 0x01, 0x0e, 0x07, 0x00, 
	0x01, 0x00, 0x01, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x40, 0x04, 0x00, 
	0x00, 0x40, 0x04, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x88, 0x04, 0x00, 
	0x01, 0x04, 0x0a, 0x00, 0x01, 0x03, 0x02, 0x00, 0x01, 0x00, 0xd2, 0x00, 0x00, 0x80, 0x2c, 0x00, 
	0x00, 0x40, 0x08, 0x00, 0x00, 0x43, 0x08, 0x00, 0x00, 0x43, 0x10, 0x00, 0x00, 0x45, 0x10, 0x00
};
// 'frame_1', 32x32px
const unsigned char callum_idle_frame_1 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x18, 0x30, 0x00, 0x00, 0x20, 0x08, 0x00, 
	0x00, 0x40, 0x64, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x8e, 0x06, 0x00, 0x01, 0x19, 0x0d, 0x00, 
	0x01, 0x19, 0x0d, 0x00, 0x01, 0x19, 0x0d, 0x00, 0x01, 0x0e, 0x07, 0x00, 0x01, 0x00, 0x01, 0x00, 
	0x00, 0x80, 0x02, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x40, 0x04, 0x00, 
	0x00, 0x40, 0x04, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x88, 0x04, 0x00, 0x00, 0x84, 0x0c, 0x00, 
	0x01, 0x02, 0x0a, 0x00, 0x01, 0x01, 0x12, 0x00, 0x01, 0x00, 0xd2, 0x00, 0x00, 0x80, 0x2c, 0x00, 
	0x00, 0x40, 0x08, 0x00, 0x00, 0x43, 0x10, 0x00, 0x00, 0x45, 0x10, 0x00, 0x00, 0x45, 0x10, 0x00
};
// 'frame_2', 32x32px
const unsigned char callum_idle_frame_2 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x18, 0x30, 0x00, 0x00, 0x20, 0x08, 0x00, 
	0x00, 0x40, 0x64, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x8e, 0x06, 0x00, 0x01, 0x19, 0x0d, 0x00, 
	0x01, 0x19, 0x0d, 0x00, 0x01, 0x1f, 0x0f, 0x00, 0x01, 0x0e, 0x07, 0x00, 0x01, 0x00, 0x01, 0x00, 
	0x00, 0x80, 0x02, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x40, 0x04, 0x00, 
	0x00, 0x40, 0x04, 0x00, 0x00, 0x80, 0x04, 0x00, 0x01, 0x08, 0x06, 0x00, 0x02, 0x04, 0x09, 0x00, 
	0x02, 0x03, 0x09, 0x00, 0x02, 0x00, 0xd9, 0x00, 0x01, 0x80, 0x2e, 0x00, 0x00, 0x40, 0x08, 0x00, 
	0x00, 0x43, 0x08, 0x00, 0x00, 0x43, 0x10, 0x00, 0x00, 0x45, 0x10, 0x00, 0x00, 0x45, 0x10, 0x00
};
// 'frame_3', 32x32px
const unsigned char callum_idle_frame_3 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x18, 0x30, 0x00, 
	0x00, 0x20, 0x08, 0x00, 0x00, 0x40, 0x64, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x8e, 0x06, 0x00, 
	0x01, 0x19, 0x0d, 0x00, 0x01, 0x1f, 0x0f, 0x00, 0x01, 0x1f, 0x0f, 0x00, 0x01, 0x0e, 0x07, 0x00, 
	0x01, 0x00, 0x01, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x40, 0x04, 0x00, 
	0x00, 0x40, 0x04, 0x00, 0x00, 0xc0, 0x04, 0x00, 0x03, 0x00, 0x04, 0x00, 0x04, 0x08, 0x0b, 0x00, 
	0x04, 0x06, 0x08, 0x80, 0x04, 0x01, 0x90, 0x80, 0x03, 0x80, 0x68, 0x80, 0x00, 0x40, 0x0f, 0x00, 
	0x00, 0x40, 0x08, 0x00, 0x00, 0x43, 0x08, 0x00, 0x00, 0x43, 0x10, 0x00, 0x00, 0x45, 0x10, 0x00
};

// 'frame_1', 32x32px
const unsigned char callum_hurt_frame_1 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0f, 0x80, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x40, 0x10, 0x00, 0x00, 0x80, 0x08, 0x00, 
	0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 
	0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0x04, 0x00, 
	0x01, 0x00, 0x04, 0x00, 0x00, 0x80, 0x08, 0x00, 0x00, 0x80, 0x08, 0x00, 0x01, 0x80, 0x08, 0x00, 
	0x02, 0x00, 0x08, 0x00, 0x04, 0x00, 0x04, 0x00, 0x08, 0x00, 0x02, 0x00, 0x10, 0x00, 0x01, 0x00, 
	0x10, 0x00, 0x01, 0x00, 0x10, 0x00, 0x11, 0x00, 0x0f, 0x80, 0x1e, 0x00, 0x00, 0x80, 0x10, 0x00, 
	0x00, 0x80, 0x10, 0x00, 0x01, 0x07, 0x10, 0x00, 0x01, 0x09, 0x10, 0x00, 0x01, 0x11, 0x10, 0x00
};
// 'frame_3', 32x32px
const unsigned char callum_hurt_frame_3 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x18, 0x30, 0x00, 
	0x00, 0x20, 0x08, 0x00, 0x00, 0x40, 0x64, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x8e, 0x06, 0x00, 
	0x01, 0x19, 0x0d, 0x00, 0x01, 0x1f, 0x0f, 0x00, 0x01, 0x1f, 0x0f, 0x00, 0x01, 0x0e, 0x07, 0x00, 
	0x01, 0x00, 0x01, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x40, 0x04, 0x00, 
	0x00, 0x40, 0x04, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x80, 0x04, 0x00, 
	0x01, 0x04, 0x0a, 0x00, 0x01, 0x03, 0x02, 0x00, 0x01, 0x00, 0xda, 0x00, 0x00, 0xc0, 0x2c, 0x00, 
	0x00, 0x40, 0x08, 0x00, 0x00, 0x43, 0x08, 0x00, 0x00, 0x43, 0x10, 0x00, 0x00, 0x45, 0x10, 0x00
};
// 'frame_2', 32x32px
const unsigned char callum_hurt_frame_2 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x18, 0x30, 0x00, 0x00, 0x20, 0x08, 0x00, 
	0x00, 0x40, 0x64, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x8e, 0x06, 0x00, 0x01, 0x19, 0x0d, 0x00, 
	0x01, 0x19, 0x0d, 0x00, 0x01, 0x1f, 0x0f, 0x00, 0x01, 0x0e, 0x07, 0x00, 0x01, 0x00, 0x01, 0x00, 
	0x00, 0x80, 0x02, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x40, 0x04, 0x00, 
	0x00, 0x40, 0x04, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x88, 0x04, 0x00, 0x01, 0x06, 0x0a, 0x00, 
	0x01, 0x01, 0x8a, 0x00, 0x01, 0x00, 0x7a, 0x00, 0x00, 0x80, 0x0c, 0x00, 0x00, 0x40, 0x08, 0x00, 
	0x00, 0x43, 0x08, 0x00, 0x00, 0x83, 0x10, 0x00, 0x00, 0x85, 0x10, 0x00, 0x00, 0x89, 0x10, 0x00
};
// 'frame_0', 32x32px
const unsigned char callum_hurt_frame_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x18, 0x30, 0x00, 
	0x00, 0x20, 0x08, 0x00, 0x00, 0x40, 0x64, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x8e, 0x06, 0x00, 
	0x01, 0x19, 0x0d, 0x00, 0x01, 0x19, 0x0d, 0x00, 0x01, 0x1f, 0x0f, 0x00, 0x01, 0x0e, 0x07, 0x00, 
	0x01, 0x00, 0x01, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x40, 0x04, 0x00, 
	0x00, 0x40, 0x04, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x88, 0x04, 0x00, 
	0x01, 0x04, 0x0a, 0x00, 0x01, 0x03, 0x0a, 0x00, 0x01, 0x00, 0xd2, 0x00, 0x00, 0x80, 0x2c, 0x00, 
	0x00, 0x40, 0x08, 0x00, 0x00, 0x43, 0x08, 0x00, 0x00, 0x43, 0x10, 0x00, 0x00, 0x45, 0x10, 0x00
};

// 'frame_2', 32x32px
const unsigned char callum_attack_frame_2 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x0c, 0x18, 0x00, 0x00, 0x10, 0x04, 0x00, 
	0x00, 0x20, 0x32, 0x00, 0x00, 0x40, 0x31, 0x00, 0x00, 0x47, 0x03, 0x00, 0x00, 0x8c, 0x86, 0x80, 
	0x00, 0x8c, 0x86, 0x80, 0x00, 0x8c, 0x86, 0x80, 0x00, 0x87, 0x03, 0x80, 0x00, 0x80, 0x00, 0x80, 
	0x00, 0x40, 0x01, 0x00, 0x00, 0x40, 0x31, 0x00, 0x00, 0x60, 0x03, 0x7e, 0x00, 0x60, 0x03, 0x81, 
	0x00, 0xa0, 0x02, 0x01, 0x01, 0x10, 0x00, 0x01, 0x01, 0x08, 0x00, 0x02, 0x02, 0x04, 0x00, 0x02, 
	0x02, 0x02, 0x0b, 0xc4, 0x02, 0x01, 0x34, 0x38, 0x01, 0xc0, 0xc4, 0x00, 0x00, 0x20, 0x04, 0x00, 
	0x00, 0x40, 0x04, 0x00, 0x00, 0x43, 0x88, 0x00, 0x00, 0x85, 0x08, 0x00, 0x00, 0x89, 0x10, 0x00
};
// 'frame_3', 32x32px
const unsigned char callum_attack_frame_3 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x18, 0x30, 0x00, 0x00, 0x20, 0x08, 0x00, 
	0x00, 0x40, 0x64, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x8e, 0x06, 0x00, 0x01, 0x19, 0x0d, 0x00, 
	0x01, 0x19, 0x0d, 0x00, 0x01, 0x19, 0x0d, 0x00, 0x01, 0x0e, 0x07, 0x00, 0x01, 0x00, 0x01, 0x00, 
	0x00, 0x80, 0x02, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x40, 0x04, 0x00, 
	0x00, 0x40, 0x04, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0x90, 0x09, 0x00, 0x01, 0x08, 0x00, 0x80, 
	0x01, 0x02, 0x10, 0x40, 0x01, 0x01, 0x28, 0x40, 0x01, 0x00, 0xcc, 0x40, 0x00, 0x80, 0x0b, 0x80, 
	0x00, 0x40, 0x08, 0x00, 0x00, 0x43, 0x08, 0x00, 0x00, 0x43, 0x10, 0x00, 0x00, 0x45, 0x10, 0x00
};
// 'frame_0', 32x32px
const unsigned char callum_attack_frame_0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x18, 0x30, 0x00, 
	0x00, 0x20, 0x08, 0x00, 0x00, 0x40, 0x64, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x8e, 0x06, 0x00, 
	0x01, 0x19, 0x0d, 0x00, 0x01, 0x19, 0x0d, 0x00, 0x01, 0x1f, 0x0f, 0x00, 0x01, 0x0e, 0x07, 0x00, 
	0x01, 0x00, 0x01, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x80, 0x62, 0x00, 0x00, 0x40, 0x04, 0x00, 
	0x00, 0x40, 0x04, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0xa0, 0x04, 0x00, 0x00, 0x98, 0x04, 0x00, 
	0x01, 0x04, 0x0a, 0x00, 0x01, 0x03, 0x02, 0x00, 0x01, 0x00, 0xd2, 0x00, 0x00, 0x80, 0x2c, 0x00, 
	0x00, 0x40, 0x08, 0x00, 0x00, 0x43, 0x08, 0x00, 0x00, 0x43, 0x10, 0x00, 0x00, 0x45, 0x10, 0x00
};
// 'frame_1', 32x32px
const unsigned char callum_attack_frame_1 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x0f, 0x80, 0x00, 0x00, 0x30, 0x60, 0x00, 0x00, 0x40, 0x10, 0x00, 0x00, 0x80, 0xc8, 0x00, 
	0x01, 0x00, 0xc4, 0x00, 0x01, 0x1c, 0x0c, 0x00, 0x02, 0x32, 0x1a, 0x00, 0x02, 0x3e, 0x1e, 0x00, 
	0x02, 0x3e, 0x1e, 0x00, 0x02, 0x1c, 0x0e, 0x00, 0x02, 0x00, 0x02, 0x00, 0x01, 0x00, 0x04, 0x00, 
	0x01, 0x00, 0xc4, 0x00, 0x00, 0x80, 0x08, 0x00, 0x00, 0x80, 0x08, 0x00, 0x00, 0x80, 0x08, 0x00, 
	0x01, 0x40, 0x08, 0x00, 0x01, 0x10, 0x08, 0x00, 0x01, 0x0c, 0x08, 0x00, 0x01, 0x03, 0x08, 0x00, 
	0x01, 0x00, 0xd0, 0x00, 0x00, 0x80, 0x30, 0x00, 0x00, 0x86, 0x10, 0x00, 0x00, 0x89, 0x10, 0x00
};

const unsigned char heart_bitmap[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x70, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 
	0x0f, 0xf0, 0x07, 0xe0, 0x03, 0xc0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char* attack_frames[4] = {
	callum_attack_frame_0,
	callum_attack_frame_1,
	callum_attack_frame_2,
	callum_attack_frame_3
};

const unsigned char* hurt_frames[4] = {
	callum_hurt_frame_0,
	callum_hurt_frame_1,
	callum_hurt_frame_2,
	callum_hurt_frame_3
};

const unsigned char* idle_frames[4] = {
	callum_idle_frame_0,
	callum_idle_frame_1,
	callum_idle_frame_2,
	callum_idle_frame_3
};

int soundValue = 0;

bool hurting = false;
bool attacking = false;
int count = 0;
int health = 3;
int resetTimer = 0;
bool led_status = LOW;
int prevInterrupt = 0;
int currInterrupt = 0;
int debounceOffset = 0;
bool buttonState = LOW;

// debounce 
int buttonPin = 6;

// interrupt for reading button press

// ISR; Triggers every 50ms
ISR(TIMER1_COMPA_vect) {
  // check devounce interval
  OCR1A += 12500; // Advance The COMPA Register 50ms

  if (digitalRead(buttonPin) != buttonState) {
    buttonState = !buttonState;
    // aka only increment on RISING button press
    // i.e., LOW -> HIGH
    if (buttonState == HIGH) {
      count++;
    }

    PIND = bit(LED);// Toggle LED in PORTD
    prevInterrupt = currInterrupt;
  }
  
}

void setup() {
  Serial.begin(9600);

  TCCR1A = 0; // Init Timer1
  TCCR1B = B00000011; // Timer1 Prescalar = 64 (4us period, 250kHz)
  OCR1A = 12500; // Timer CompareA Register (50ms)
  TIMSK1 |= B00000010; // Enable Timer COMPA Interrupt

  pinMode(LED, OUTPUT);
  pinMode(buttonPin, INPUT);
  Serial.println("Init Complete");

  // init display 
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // alt 0x3D
  display.clearDisplay();
  display.display();
}

void loop() {
  soundValue = 0;

  // Collect samples
  for (int i = 0; i < SAMPLES; i++) {
    vReal[i] = analogRead(A2); // Read sound sensor
    vImag[i] = 0;                           // Imaginary part is 0
    delayMicroseconds(1000000 / SAMPLING_FREQUENCY); // Sampling delay
  }
  
  // Perform FFT
  FFT.windowing(vReal, SAMPLES, FFT_WIN_TYP_HAMMING, FFT_FORWARD);
  FFT.compute(vReal, vImag, SAMPLES, FFT_FORWARD);
  FFT.complexToMagnitude(vReal, vImag, SAMPLES);

  // Find the peak frequency
  double peakFrequency = abs(FFT.majorPeak(vReal, SAMPLES, SAMPLING_FREQUENCY));
  Serial.println(peakFrequency);

  // Serial.println(count);

  if (count != 0 && count % 10 == 0) {
    attacking = true;
    hurting = false;
    tone(5, TARGET_FREQUENCY);
  } else if (peakFrequency > 500 && peakFrequency < 1000) {
    hurting = true;
    attacking = false;
    noTone(5);
  } else {
    attacking = false;
    hurting = false;
    noTone(5);
  }

  // all of these should play for min 4 frames 
  if (health > 0) {
    if (attacking) {
    // player is attacking
    for (int i = 0; i < 4; i++) {
      display.clearDisplay();
      display.drawBitmap(20, 0, attack_frames[i], FRAME_WIDTH, FRAME_HEIGHT, 1);
      drawRest(count, health);
    }

    } else if (hurting) {
      // player has been attacked 
      health--; 

      for (int i = 0; i < 4; i++) {
        display.clearDisplay();
        display.drawBitmap(20, 0, hurt_frames[i], FRAME_WIDTH, FRAME_HEIGHT, 1);
        drawRest(count, health);
      }

    } else {
      // player is idling 
      for (int i = 0; i < 4; i++) {
        display.clearDisplay();
        display.drawBitmap(20, 0, idle_frames[i], FRAME_WIDTH, FRAME_HEIGHT, 1);
        drawRest(count, health);
      }
    }
    
  } else {
    // player out of health; Game Over!
    // until reset 
    display.clearDisplay();
    display.print("Game Over!");
    display.display();

    if (resetTimer > 30) {
      health = 3;
      count = 0;
      resetTimer = 0;
    }

    resetTimer++;
  }
}

void drawRest(int count, int numHearts) {
  int textX = 28 + FRAME_WIDTH + 2; // icon's right edge + a small gap
  int textY = 0;
  display.setCursor(textX, textY);
  display.setTextSize(1);       // 1 = small, 2 = double size, etc.
  display.setTextColor(WHITE);  // or BLACK, depending on background

  int heartOffset = textX;
  for (int i = 0; i < numHearts; i++) {
    display.drawBitmap(heartOffset, textY + 15, heart_bitmap, 16, 16, 1);
    heartOffset += 15;
  }

  // Print your label and count
  display.print("Energy: ");
  display.print(count);
  display.display();
}